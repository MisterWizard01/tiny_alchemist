pico-8 cartridge // http://www.pico-8.com
version 36
__lua__
function _init()
	ta_x,ta_y,tb_x,tb_y=60,64,68,64
	
	reset_bolt(1,0)
	
	max_steps=1
	start_ang=0
	
	⧗=0
end

function _update()
	⧗+=1
	if ⧗%2!=0 then
		return
	end
	
	max_steps+=.08
	start_ang-=.01
	
	if start_ang<-.3 then
		max_steps=1
		start_ang=0
	end
	
	reset_bolt(max_steps,start_ang)
	
	while true do
		add(bolt.path,{
			x=bolt.x,
			y=bolt.y,
		})
			
		bolt.x+=cos(bolt.ang)*bolt.jump
		bolt.y-=sin(bolt.ang)*bolt.jump
		
		local targ_dir=atan2(tb_x-bolt.x,
			bolt.y-tb_y)
		local targ_dist=sqrt(dist_sqrd(bolt.x,bolt.y,
			tb_x,tb_y))
		
		if targ_dist<1 then
			break
		elseif targ_dist<bolt.jump then
			bolt.ang=targ_dir
			bolt.jump=targ_dist
		else
			local dif=targ_dir-bolt.ang
			if (dif>.5) dif=dif-1
			if (dif<-.5) dif=dif+1
			bolt.ang+=dif/(1+rnd(max(1,bolt.max_steps-bolt.steps)))
		end
		bolt.steps+=1
	end
end

function _draw()
	cls(7)
	
	local f=sin(time()/2)

	circfill(ta_x,ta_y,4.8+f,2)
	circfill(tb_x,tb_y,4.8+f,2)
	draw_bolt(bolt,2,2,max(0,-20*(start_ang+.25)))
	circfill(ta_x,ta_y,3.6+f,14)
	circfill(tb_x,tb_y,3.6+f,14)
	draw_bolt(bolt,1,14,max(0,-20*(start_ang+.25)))
	circfill(ta_x,ta_y,2.8+f,7)
	circfill(tb_x,tb_y,2.8+f,7)
	draw_bolt(bolt,1,7,.85)
	
	circfill(ta_x,ta_y,2,5)
	pset(ta_x-1,ta_y-1,6)
	circfill(tb_x,tb_y,2,5)
	pset(tb_x-1,tb_y-1,6)
end

function reset_bolt(max_steps,ang)
	bolt={
		x=ta_x,
		y=ta_y,
		path={},
		steps=0,
		max_steps=max_steps or 5,
		ang=ang or .625,
		jump=4,
	}
end

function draw_bolt(b,w,c,dis)
	for i=1,#(b.path)-1 do	
		line2(b.path[i].x,
			b.path[i].y,
			b.path[i+1].x,
			b.path[i+1].y,w,c,dis)
	end
	if #b.path>0 then
		local last=b.path[#b.path]
		line2(last.x,last.y,
			b.x,b.y,w,c,dis)
	end
end
-->8
function dist_sqrd(x1,y1,x2,y2)
	local dx,dy=x2-x1,y2-y1
	return dx*dx+dy*dy
end

function line2(x1,y1,x2,y2,w,c,dis)
	dis=dis or 0
	local x,y=x1,y1
	local dx,dy=x2-x,y2-y
	local slope=dy/dx
	
	while abs(dx)>=1 or abs(dy)>=1 do
		if rnd()>dis then
			circfill(x,y,w/2,c)
		end
		if abs(slope)<1 then
			x+=sign(dx)
			y+=slope*sign(dx)
		else
			y+=sign(dy)
			x+=sign(dy)/slope
		end
		dx,dy=x2-x,y2-y
	end
	circfill(x,y,w/2,c)
end

function sign(n)
	if (n==0) return 0
	return sgn(n)
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000002222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000002eeee200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000272222e20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000002e2002720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00002e2002ee20000022200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0022272002e7e20022eee22000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02eee2002e777e22ee777ee200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02722002e75557eee75557e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02ee222e7565557e7565557e20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00227e777555557e7555557e20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000022ee7555557e7555557e20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000022e75557e2e75557e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000002e757e262e757e2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000625552666255526000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000666566666665666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000066d5d66666d5d66000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000666d6666666d666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000d6666666666666d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ddddddddddddddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ddd8d8d8d8d8ddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ddddddddddddddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055555555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000020200000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
